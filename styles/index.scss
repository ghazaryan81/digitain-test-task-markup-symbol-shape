/* stylelint-disable order/order */

/* stylelint-disable no-duplicate-selectors */
@use "sass:map";
@use "sass:meta";
@use "sass:math";
@use "sass:string";

@use "./abstracts/root-variables" as *;
@use "./abstracts/functions" as *;

// convert scss vars to css property
:root {
 @each $item, $val in $variables {
  @each $sub-item, $sub-val in $val {
   // convert value from unit px to rem
   @if meta.type-of($sub-val) == "number" and math.unit($sub-val) == "px" {
    --#{$item}--#{$sub-item}: #{px-to-rem(strip-unit($sub-val))};
   } @else {
    --#{$item}--#{$sub-item}: #{$sub-val};
   }
  }
 }
 --symbol--outline-width: calc(var(--symbol--diameter) * var(--symbol--outline-width-ratio));
 --symbol--outline-width-min: calc(var(--symbol--outline-width) / 6);
 font-size: var(--global--font-size);
}

// --- mixins ---
@mixin border-style() {
 border-width: clamp(
  var(--symbol--outline-width-min),
  px-to-vw-vh($symbol-outline-width, 1vw),
  var(--symbol--outline-width)
 );
 border-style: solid;
 border-color: var(--symbol--outline-color);
 border-radius: 50%;
 @media (max-width: px-to-rem($max-width)) and (orientation: portrait) {
  border-width: clamp(
   var(--symbol--outline-width-min),
   px-to-vw-vh($symbol-outline-width, 1vw),
   var(--symbol--outline-width)
  );
 }

 @media (max-height: px-to-rem($max-width)) and (orientation: landscape) {
  border-width: clamp(
   var(--symbol--outline-width-min),
   px-to-vw-vh($symbol-outline-width, 1vh),
   var(--symbol--outline-width)
  );
 }
}

@mixin curve-const {
 position: absolute;
 width: var(--curve--diameter);
 height: var(--curve--diameter);
 content: "";
 border: inherit;
 border-radius: inherit;
}

@mixin curves {
 &:after,
 &:before {
  @include curve-const;
  top: 50%;
 }

 &:before {
  left: 0;
  transform: translateX(calc(-50% + radial-shift())) translateY(-50%);
 }

 &:after {
  right: 0;
  transform: translateX(calc(50% - radial-shift())) translateY(-50%);
 }
}

// --- begin ---
*,
*::before,
*::after {
 box-sizing: inherit;
}

body,
html {
 vertical-align: baseline;
 overflow: hidden;
 width: 100%;
 height: 100%;
 margin: 0;
 padding: 0;
 border: 0;
}

html {
 box-sizing: border-box;
}

body {
 display: flex;
 justify-content: center;
 align-items: center;
 background-color: var(--body--color);

 b {
  position: relative;
  top: 0;
  left: 0;
  display: block;
  overflow: hidden;
  width: 100%;
  max-width: var(--symbol--diameter);
  max-height: var(--symbol--diameter);
  border-radius: 50%;
  aspect-ratio: 1 / 1;

  @media (max-width: px-to-rem($max-width)) and (orientation: portrait) {
   width: 100%;
   height: auto;
  }

  @media (max-height: px-to-rem($max-width)) and (orientation: landscape) {
   width: auto;
   height: 100%;
  }

  i,
  u {
   top: 0;
   left: 0;
   display: block;
   width: 100%;
   @include curves;
  }

  i {
   @include border-style;
   position: relative;
   max-width: var(--symbol--diameter);
   aspect-ratio: 1 / 1;
   list-style: normal;
   transform: rotate(-20deg);
  }

  u {
   position: absolute;
   height: 100%;
   transform: rotate(90deg);

   &:after,
   &:before {
    @include border-style();
   }
  }
 }
}
